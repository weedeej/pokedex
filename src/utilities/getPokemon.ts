import { PkInfo } from "@/types";
import { sendRequest } from "./sendRequeset";

/**
 * Fetch info by providing pokemon id
 * @param pk_id Pokemon Id (ex: 1)
 * @returns {Promise<PkInfo | null>}
 */
export async function getPokemon(pk_id: number) {
  let res: Response | null = null;
  try {
    res = await sendRequest(`getItems($pk_id: Int = ${pk_id}) {
      pokemon: pokemon_v2_pokemon(where: {id: {_eq: $pk_id}}, limit: 1) {
        id
        name
        base_experience
        types: pokemon_v2_pokemontypes(where: {pokemon_id: {_eq: $pk_id}}) {
          type_id
          pokemon_v2_type {
            name
          }
        }
      }
      pk_level: pokemon_v2_experience_by_pk(id: $pk_id) {
        level
      }
    }
    `);
  } catch (e) {
    console.error(e);
    res = null;
  }
  if (!res) return res;
  const {data} = (await res.json()) as APIResponse;
  const {pokemon:pokemonList, pk_level} = data;
  const [pokemon] = pokemonList;
  const {types, name, base_experience} = pokemon;
  const {level} = pk_level ?? {level: 1};

  return {
    id: pk_id,
    name,
    base_experience,
    types: types.map((pkType: { pokemon_v2_type: { name: any; }; }) => pkType.pokemon_v2_type.name),
    level
  } as PkInfo
}

// Generated by https://quicktype.io

interface APIResponse {
  data: Data;
}

interface Data {
  pokemon:  Pokemon[];
  pk_level: PkLevel;
}

interface PkLevel {
  level: number;
}

interface Pokemon {
  id:    number;
  name:  string;
  base_experience: number;
  types: Type[];
}

interface Type {
  type_id:         number;
  pokemon_v2_type: PokemonV2Type;
}

interface PokemonV2Type {
  name: string;
}
